{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lab Exercise: Diamond Printing and Caesar Cipher\n",
    "\n",
    "This quiz contains two questions on loops, string manipulation, and basic cryptography."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1: Diamond Printing\n",
    "\n",
    "In the code cell below, modify the two `for` loop `range` statements to make the code print out a solid diamond.\n",
    "Your output should look like:\n",
    "\n",
    "```\n",
    "  *\n",
    " ***\n",
    "*****       # if height entered is 5\n",
    " ***\n",
    "  *\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    *\n",
      "   ***\n",
      "  *****\n",
      " *******\n",
      "*********\n",
      " *******\n",
      "  *****\n",
      "   ***\n",
      "    *\n"
     ]
    }
   ],
   "source": [
    "txt = \"Please input a height, an odd integer between 3 and 15 inclusive: \"\n",
    "while True:\n",
    "    try:\n",
    "        height = int(input(txt))\n",
    "    except ValueError:\n",
    "        txt = 'Enter an integer: '        \n",
    "    else:\n",
    "        if(height < 3 or height > 15):\n",
    "            txt = 'between 3 and 15 please: '\n",
    "        elif height % 2 == 0:\n",
    "            txt = ' an odd number please'\n",
    "        else:\n",
    "            break\n",
    "\n",
    "half = height // 2\n",
    "\n",
    "'''\n",
    "Hint:\n",
    "    leading_spaces is already figured out for you.\n",
    "    In each loop we just need to figure out the number of '*\"s \n",
    "    to print out.  Suppose height = 7:    \n",
    "\n",
    "    For the top diamond we need a loop that will generate the sequence\n",
    "    1, 3, 5, 7 think of using height and the step function in range. \n",
    "    Remember range(start,stop,step) will include start but not stop.\n",
    "\n",
    "    In the bottom diamond we need a loop that will generate the sequence\n",
    "    5, 3, 1.  Again, think of using height and the step function in range.\n",
    "    Notice in the top half we end with printing out height number of stars.\n",
    "\n",
    "          *\n",
    "         ***\n",
    "        *****\n",
    "       *******    last line of top half, height number of stars\n",
    "\n",
    "    Each subsequent row prints out 2 '*' s less so a -2 may come in handy (twice!)\n",
    "\n",
    "\n",
    "'''\n",
    "\n",
    "# Top half of diamond\n",
    "leading_spaces = half\n",
    "#for star_count in range(1, height + 1):               # TODO only modify this statement\n",
    "for star_count in range(1, height + 1, 2):  \n",
    "    print(\" \" * leading_spaces + \"*\" * star_count)\n",
    "    leading_spaces -= 1\n",
    "\n",
    "# Bottom half of diamond\n",
    "leading_spaces = 1\n",
    "#for star_count in range(height - 2, 0):               # TODO only modify this statement\n",
    "for star_count in range(height - 2, 0, -2):     \n",
    "    print(\" \" * leading_spaces + \"*\" * star_count)\n",
    "    leading_spaces += 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 2: Caesar Cipher Decryption\n",
    "\n",
    "The program below will decrypt a message using the Caesar cipher. Julius needs to decode the message. Modify the code to try all possible shifts (1 to 25) to find the secret message.\n",
    "\n",
    "Hint: Use `if 'python' in decode_msg:` to check for the correct decoding."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "range expected at least 1 argument, got 0",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[9], line 14\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[38;5;66;03m# TODO: create a loop from 1 to 25 to try all shifts\u001b[39;00m\n\u001b[1;32m     10\u001b[0m \u001b[38;5;66;03m#       decode the message and print the one containing 'python'\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;66;03m#       The code below should be inside this loop\u001b[39;00m\n\u001b[1;32m     13\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;241m26\u001b[39m):\n\u001b[0;32m---> 14\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m shift \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28;43mrange\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m:  \u001b[38;5;66;03m#TODO fix range\u001b[39;00m\n\u001b[1;32m     16\u001b[0m         shifted \u001b[38;5;241m=\u001b[39m [\u001b[38;5;28;01mNone\u001b[39;00m] \u001b[38;5;241m*\u001b[39m \u001b[38;5;241m26\u001b[39m\n\u001b[1;32m     17\u001b[0m         \u001b[38;5;28;01mfor\u001b[39;00m idx \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;241m26\u001b[39m):\n",
      "\u001b[0;31mTypeError\u001b[0m: range expected at least 1 argument, got 0"
     ]
    }
   ],
   "source": [
    "import string\n",
    "\n",
    "#import IPython\n",
    "\n",
    "msg = 'xu ndj vti iwxh bthhpvt, ndj pgt bphitgxcv eniwdc'\n",
    "\n",
    "alphabet = list(string.ascii_lowercase)\n",
    "\n",
    "# TODO: create a loop from 1 to 25 to try all shifts\n",
    "#       decode the message and print the one containing 'python'\n",
    "#       The code below should be inside this loop\n",
    "\n",
    "for i in range(26):\n",
    "    for shift in range():  #TODO fix range\n",
    "\n",
    "        shifted = [None] * 26\n",
    "        for idx in range(26):\n",
    "            new_idx = (idx - shift) % 26\n",
    "            shifted[new_idx] = alphabet[idx]\n",
    "\n",
    "        decode_msg = ''\n",
    "        for character in msg:\n",
    "            if character.isalpha():\n",
    "                idx = shifted.index(character)\n",
    "                decode_msg += alphabet[idx]\n",
    "            else:\n",
    "                decode_msg += character\n",
    "\n",
    "    # TODO add code to check if python is in the decoded message\n",
    "    # if it is print out the decoded message and the shift value\n",
    "\n",
    "    for i in range(1, 26 ):\n",
    "        for shift in range(1, 26):  #TODO fix range\n",
    "\n",
    "            shifted = [None] * 26\n",
    "            for idx in range(26):\n",
    "                new_idx = (idx - shift) % 26\n",
    "                shifted[new_idx] = alphabet[idx]\n",
    "\n",
    "        decode_msg = ''\n",
    "        for character in msg:\n",
    "            if character.isalpha():\n",
    "                idx = shifted.index(character)\n",
    "                decode_msg += alphabet[idx]\n",
    "            else:\n",
    "                decode_msg += character\n",
    "            print(f'Shift {shift}: {decode_msg}')\n",
    "            if 'python' in decode_msg:\n",
    "                print(\"Your Secret Message Has Been Found!!\")\n",
    "            break\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
